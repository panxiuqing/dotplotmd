#!/usr/bin/python

"""
MatPlot Extension for Python-Markdown
=====================================

adds image generated by a block of matplotlib codes to Python-Markdown.

Copyright 2012-2012 [Xiuqing Pan](http://panxiuqing.github.com/).

Project website: <http://github.com/panxiuqing/dotplotmd>
Contact: panxiuqing@gmail.com

License: BSD

Dependencies:
* [Python 2.7+](http://python.org)
* [Markdown 2.0+](http://www.freewisdom.org/projects/python-markdown/)
* [matplotlib 1.1.1+](http://matplotlib.sourceforge.net/index.html)

"""

import markdown
import re
import os

class PlotPreprocessor(markdown.preprocessors.Preprocessor):
    """
    baseic support of matplotlib to markdown.
    """
    pattern = re.compile(
        r'\{\[matplot\]\}(.+?)\{\[/matplot\]\}', re.S)
    save_pattern = re.compile(
        r"savefig\(['\"](.+?)['\"]\)")

    def run(self, lines):
        lns = '\n'.join(lines)
        def repl(m):
            new_lines = ''
            try:
                codeblock = m.group(1)
            except ValueError:
                return m.group()
            new_lines = self.execmatplot(codeblock)
            return new_lines

        return self.pattern.sub(repl, lns).splitlines()

    def execmatplot(self, codeblock):
        new_lines = ''
        if self.config['img_path'] != './':
            codeblock = self.save_pattern.sub(r"savefig('" + self.config['img_path'] + r"\1')", codeblock)
        exec(codeblock)
        path_name_list = self.save_pattern.findall(codeblock)
        for path_name in path_name_list:
            new_lines += "![img](" + path_name + ")"
        return new_lines
    
class MatPlotExtension(markdown.Extension):
    def __init__(self, configs):
        # define default configs
        self.config = {
            'img_path' : ["./", "default path of img is as same as html file"]
            }

        for key, value in configs:
            self.setConfig(key, value)
            
    def extendMarkdown(self, md, md_globals):
        """ Add PlotPreprocessor to Markdown instance. """
        ploter = PlotPreprocessor(md)
        ploter.config = self.getConfigs()
        md.registerExtension(self)
        md.preprocessors.add('PlotPreprocessor', ploter, '>reference')

def makeExtension(configs=None):
    return MatPlotExtension(configs=configs)
